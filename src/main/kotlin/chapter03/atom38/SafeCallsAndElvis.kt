package chapter03.atom38

/**
 * 코틀린은 널 가능성을 편리하게 처리할 수 있도록 여러 연산자를 제공합니다.
 *
 * 안전한 호출은 일반 호출에 사용하는 점을 물음표와 점으로 바꾼 것입니다.
 * 안전한 호출을 사용하면 널이 될 수 있는 타입의 멤버에 접근하면서 아무 예외도 발생하지 않게 해줍니다.
 * 안전한 호출은 null이 아닐때만 연산을 수행합니다.
 *
 * ?.(안전한 호출)의 결과로 null을 만드는 것 이상으로 작업을 해야한다면 엘비스 연산자가 대안을 제공합니다.
 * 엘비스 연산자는 왼쪽 피연산자가 null이 아니면 그 값을 사용하고, null이면 오른쪽 피연산자를 사용합니다.
 */

fun main() {
    val s: String? = null
    println(s?.length) // null
    println(s?.length ?: 0) // 0 (엘비스 연산자 사용)
}