package chapter02.atom22

/**
 * 테스트를 통해 문제의 원인을 빠르게 찾아야 나중에 더 큰 문제가 발생하지 않습니다.
 *
 * 대표적으로 사용되는 테스트 프레임 워크는 다음과 같습니다.
 * - JUnit : 가장 널리 사용되는 테스트 프레임워크로, 코틀린에서도 유용하게 쓸 수 있습니다.
 * - 코테스트(kotest) : 코틀린 전용 테스트 프레임워크로, 코틀린 언어의 여러 기능을 살려서 작성됐습니다.
 * - 스펙(Spek) 프레임워크 : 명세 테스트라는 다른 형태의 테스트를 제공합니다.
 *
 * 테스트는 소프트웨어 개발 과정에 포함되어 있어야 가장 효과적입니다.
 * 코드를 작성하기 전에 테스트를 먼저 작성해 실패시킨 후, 나중에 테스트를 통과하도록 코드를 작성하는 방법은 TDD(테스트 주도 개발)이라고 합니다.
 * 함수를 만들 때, 테스트 외의 다른 이유가 없더라도 테스트를 위해 함수가 무언가를 반환하도록 하면 검증에 용이하기 때문에 더 나은 설계가 되는 경우들이 있습니다.
 */